{
    "openrpc": "1.0.0-rc1",
    "info": {
        "title": "p2panda RPC interface",
        "version": "0.0.1",
        "description": "The API for a p2panda node which can be used for creating and retrieving entries on a Bamboo append-only log.",
        "contact": {
          "name": "p2panda Team",
          "email": "contributors@p2panda.org",
          "url": "https://p2panda.org"
        },
        "license": {
          "name": "GNU Affero General Public License v3.0"
        }
      },
    "servers": [
        {
          "name": "p2panda node",
          "url": "https://welle.liebechaos.org"
        }
      ],    
    "components": {
        "contentDescriptors": {
            "EntryArgs": {
                "name": "nextEntryArgs",
                "summary": "Values required for publishing a p2panda entry",
                "description": "The values for `entryHashSkiplink`, `entryHashBacklink`, `seqNum` and `logId` must be fetched from a node before constructung and publishing a new entry to the specified log. `p2panda` logs are based on the [Bamboo](https://github.com/AljoschaMeyer/bamboo) append only log specification. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "$ref": "#/components/schemas/EntryArgs"
                }
            },
            "Author": {
                "name": "author",
                "summary": "The public key of a p2panda author",
                "description": "Authors are hex encoded ed25519 public key strings. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "$ref": "#/components/schemas/Author"
                }
            },
            "Schema": {
                "name": "schema",
                "summary": "The hash of a p2panda schema",
                "description": "Validation for message payloads and definitions of system schemas. This uses `Concise Data Definition Language` ([CDDL](https://datatracker.ietf.org/doc/html/rfc8610)) internally to verify [CBOR](https://cbor.io/) data of p2panda messages. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "$ref": "#/components/schemas/Hash"
                }
            },
            "QueryEntriesResponse": {
                "name": "entries",
                "summary": "The response from a call to panda_queryEntries",
                "required": true,
                "schema": {
                    "$ref": "#/components/schemas/Entries"
                }
            }
        },
        "schemas": {
            "Author": {
                "type": "string",
                "pattern": "[0-9a-f]{64}",
                "minLength": 64,
                "maxLength": 64
            },
            "Hash": {
                "type": "string",
                "minLength": 132,
                "maxLength": 132,
                "pattern": "[0-9a-f]{132}"
            },
            "EntryArgs": {
                "type": "object",
                "properties": {
                    "entryHashSkiplink": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Hash"
                            }
                        ]
                    },
                    "entryHashBacklink": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Hash"
                            }
                        ]
                    },
                    "seqNum": {
                        "type": "number",
                        "minimum": 1
                    },
                    "logId": {
                        "type": "number",
                        "minimum": 1
                    }
                }
            },
            "Entry": {
                "type": "object",
                "properties": {
                    "author": {
                        "$ref": "#/components/schemas/Author"
                    },
                    "entryBytes": {
                        "type": "string"
                    },
                    "entryHash": {
                        "$ref": "#/components/schemas/Hash"
                    },
                    "logId": {
                        "type": "number",
                        "minimum": 1
                    },
                    "payloadBytes": {
                        "type": "string"
                    },
                    "payloadHash": {
                        "$ref": "#/components/schemas/Hash"
                    },
                    "seqNum": {
                        "type": "number",
                        "minimum": 1
                    }
                }
            },
            "EntryEncoded": {
                "type": "string"
            },
            "MessageEncoded": {
                "type": "string"
            },
            "Entries": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Entry"
                }
            }
        },
        "examples": {
            "MostRecentPublishedEntry": {
                "name": "entryEncoded",
                "summary": "Encoded bytes of the first entry in a p2panda `Bamboo` log.",
                "value": {
                    "$ref": "./test/test-data.json#/panda/logs/0/encodedEntries/3/entryBytes"
                }
            },
            "MostRecentPublishedMessage": {
                "name": "messageEncoded",
                "summary": "Encoded bytes of the payload of the first entry in a p2panda `Bamboo` log.",
                "value": {
                    "$ref": "./test/test-data.json#/panda/logs/0/encodedEntries/3/payloadBytes"
                }
            },
            "EntryArgsResult": {
                "name": "nextEntryArgs",
                "summary": "The arguments required for publishing the next `Entry` to the test log.",
                "value": {
                    "$ref": "./test/test-data.json#/panda/logs/0/nextEntryArgs"
                }
            },
            "Author": {
                "name": "author",
                "summary": "The `Author` of the test log.",
                "value": {
                    "$ref": "./test/test-data.json#/panda/publicKey"
                }
            },
            "Schema": {
                "name": "schema",
                "summary": "The `Schema` which this log is assigned",
                "value": {
                    "$ref": "./test/test-data.json#/panda/logs/0/decodedMessages/0/schema"
                }
            },
            "Entries": {
                "name": "entries",
                "summary": "All `Entries` in the test Log",
                "value": {
                    "entries": {"$ref": "./test/test-data.json#/panda/logs/0/encodedEntries"}
                }
            }
        }
    },
    "methods": [
        {
            "name": "panda_getEntryArguments",
            "summary": "Returns arguments needed for constructing the next entry given author and schema.",
            "description": "Fetch the required arguments needed when constructing and publishing an `Entry` to a p2panda log. `p2panda` logs are based on the [Bamboo](https://github.com/AljoschaMeyer/bamboo) append only log specification. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/Author"
                },
                {
                    "$ref": "#/components/contentDescriptors/Schema"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/EntryArgs"
            },
            "examples": [
                {
                    "name": "Example `Entry` arguments request.",
                    "summary": "An example of a valid parameters and response when making a request, based on test data.",
                    "params": [
                        {
                            "$ref": "#/components/examples/Author"
                        },
                        {
                            "$ref": "#/components/examples/Schema"
                        }
                    ],
                    "result": {
                        "$ref": "#/components/examples/EntryArgsResult"
                    }
                }
            ]
        },
        {
            "name": "panda_queryEntries",
            "summary": "Query node for encoded entries of a given schema.",
            "description": "This method returns all entries of a given schema. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/Schema"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/QueryEntriesResponse"
            },
            "examples": [
                {
                    "name": "Example request for the next `Entry` arguments",
                    "summary": "The parameters and response when making this request according to the test data.",
                    "params": [
                        {
                            "$ref": "#/components/examples/Schema"
                        }
                    ],
                    "result": {
                        "$ref": "#/components/examples/Entries"
                    }
                }
            ]
        },
        {
            "name": "panda_publishEntry",
            "summary": "Publish an encoded entry and message.",
            "description": "Publish a new `Entry` to a `p2panda` log. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "entryEncoded",
                    "schema": {
                        "$ref": "#/components/schemas/EntryEncoded"
                    }
                },
                {
                    "name": "messageEncoded",
                    "schema": {
                        "$ref": "#/components/schemas/MessageEncoded"
                    }
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/EntryArgs"
            },
            "examples": [
                {
                    "name": "Example for publishing an `Entry`",
                    "summary": "Example of valid parameters for publishing a new `Entry` on the test log. Returns the `Entry` arguments required for publishing the next `Entry` on our log.",
                    "params": [
                        {
                            "$ref": "#/components/examples/MostRecentPublishedEntry"
                        },
                        {
                            "$ref": "#/components/examples/MostRecentPublishedMessage"
                        }
                    ],
                    "result": {
                        "$ref": "#/components/examples/EntryArgsResult"
                    }
                }
            ]
        }
    ]
}