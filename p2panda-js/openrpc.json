{
    "openrpc": "1.0.0-rc1",
    "info": {
        "title": "p2panda RPC interface",
        "version": "0.0.1"
    },
    "components": {
        "contentDescriptors": {
            "EntryArgs": {
                "name": "nextEntryArgs",
                "summary": "Values required for publishing a p2panda entry",
                "description": "The values for `entryHashSkiplink`, `entryHashBacklink`, `seqNum` and `logId` must be fetched from a node before constructung and publishing a new entry to the specified log. `p2panda` logs are based on the [Bamboo](https://github.com/AljoschaMeyer/bamboo) append only log specification. See the [p2panda-rs]() and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "type": "object",
                    "properties": {
                        "entryHashSkiplink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "entryHashBacklink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "seqNum": {
                            "type": "number"
                        },
                        "logId": {
                            "type": "number"
                        }
                    }
                }
            },
            "Author": {
                "name": "author",
                "summary": "The public key of a p2panda author",
                "description": "Authors are hex encoded ed25519 public key strings. See the [p2panda-rs]() and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "[0-9a-f]{64}",
                    "minLength": 64,
                    "maxLength": 64
                }
            },
            "Schema": {
                "name": "schema",
                "summary": "The hash of a p2panda schema",
                "description": "Validation for message payloads and definitions of system schemas. This uses `Concise Data Definition Language` ([CDDL}(https://datatracker.ietf.org/doc/html/rfc8610)) internally to verify [CBOR](https://cbor.io/) data of p2panda messages. See the [p2panda-rs]() and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "type": "string",
                    "minLength": 132,
                    "maxLength": 132,
                    "pattern": "[0-9a-f]{132}"
                }
            }
        },
        "schemas": {
            "Author": {
                "type": "string",
                "pattern": "[0-9a-f]{64}",
                "minLength": 64,
                "maxLength": 64
            },
            "Hash": {
                "type": "string",
                "minLength": 132,
                "maxLength": 132,
                "pattern": "[0-9a-f]{132}"
            },
            "EntryArgs": {
                "type": "object",
                "properties": {
                    "entryHashSkiplink": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "type": "string",
                                "minLength": 132,
                                "maxLength": 132,
                                "pattern": "[0-9a-f]{132}"
                            }
                        ]
                    },
                    "entryHashBacklink": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "type": "string",
                                "minLength": 132,
                                "maxLength": 132,
                                "pattern": "[0-9a-f]{132}"
                            }
                        ]
                    },
                    "seqNum": {
                        "type": "number"
                    },
                    "logId": {
                        "type": "number"
                    }
                }
            },
            "Entry": {
                "type": "object",
                "properties": {
                    "author": {
                        "type": "string",
                        "pattern": "[0-9a-f]{64}",
                        "minLength": 64,
                        "maxLength": 64
                    },
                    "entryBytes": {
                        "type": "string"
                    },
                    "entryHash": {
                        "type": "string",
                        "minLength": 132,
                        "maxLength": 132,
                        "pattern": "[0-9a-f]{132}"
                    },
                    "logId": {
                        "type": "number"
                    },
                    "payloadBytes": {
                        "type": "string"
                    },
                    "payloadHash": {
                        "type": "string",
                        "minLength": 132,
                        "maxLength": 132,
                        "pattern": "[0-9a-f]{132}"
                    },
                    "seqNum": {
                        "type": "number"
                    }
                }
            },
            "EntryEncoded": {
                "type": "string"
            },
            "MessageEncoded": {
                "type": "string"
            },
            "Entries": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "author": {
                            "type": "string",
                            "pattern": "[0-9a-f]{64}",
                            "minLength": 64,
                            "maxLength": 64
                        },
                        "entryBytes": {
                            "type": "string"
                        },
                        "entryHash": {
                            "type": "string",
                            "minLength": 132,
                            "maxLength": 132,
                            "pattern": "[0-9a-f]{132}"
                        },
                        "logId": {
                            "type": "number"
                        },
                        "payloadBytes": {
                            "type": "string"
                        },
                        "payloadHash": {
                            "type": "string",
                            "minLength": 132,
                            "maxLength": 132,
                            "pattern": "[0-9a-f]{132}"
                        },
                        "seqNum": {
                            "type": "number"
                        }
                    }
                }
            },
            "QueryEntriesResponse": {
                "type": "object",
                "properties": {
                    "entries": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "author": {
                                    "type": "string",
                                    "pattern": "[0-9a-f]{64}",
                                    "minLength": 64,
                                    "maxLength": 64
                                },
                                "entryBytes": {
                                    "type": "string"
                                },
                                "entryHash": {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                },
                                "logId": {
                                    "type": "number"
                                },
                                "payloadBytes": {
                                    "type": "string"
                                },
                                "payloadHash": {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                },
                                "seqNum": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            }
        },
        "examples": {
            "FirstEntryEncoded": {
                "name": "Encoded first `Entry`.",
                "summary": "Encoded bytes of the first entry in a p2panda `Bamboo` log.",
                "value": "009cdb3a8c0c4b308173d4c3c43a67a6d013444af99acb8be6c52423746d9aa2c10101f60040190c0d1b8a9bbe5d8b94c8226cdb5d9804af3af6a0c5e34c918864370953dbc7100438f1e5cb0f34bd214c595e37fbb0727f86e9f3eccafa9ba13ed8ef77a04ef01463f550ce62f983494d0eb6051c73a5641025f355758006724e5b730f47a4454c5395eab807325ee58d69c08d66461357d0f961aee383acc3247ed6419706"
            },
            "FirstEntryMessageEncdoded": {
                "name": "Encoded first `Message`",
                "summary": "Encoded bytes of the payload of the first entry in a p2panda `Bamboo` log.",
                "value": "a466616374696f6e6663726561746566736368656d6178843030343031643736353636373538613562366266633536316631633933366438666338366235623432656132326162316461626634306432343964323764643930363430316664653134376535336634346331303364643032613235343931366265313133653531646531303737613934366133613063313237326239623334383433376776657273696f6e01666669656c6473a26b6465736372697074696f6ea26474797065637374726576616c756571666f7220706c6179696e67206368657373646e616d65a26474797065637374726576616c7565656368657373"
            },
            "EntryArgsResult": {
                "name": "`Entry` arguments",
                "summary": "The arguments required for publishing the next `Entry` to the test log.",
                "value": {
                    "entryHashBacklink": "004028107485824f4ccbd42aaa9136855e373837b175f41e63f0bc410aba4bf0e520ab5668467022d36fe886985e6c33e9212a2a86eeb86a9eba58f50adfcb4ad81b",
                    "entryHashSkiplink": null,
                    "logId": 1,
                    "seqNum": 2
                }
            },
            "Author": {
                "name": "Log `Author`",
                "summary": "The `Author` of the test log.",
                "value": "2deee1fac104aaac753377bbc2ff70fa5d5154abdac4b4577392db88de6a9a49"
            },
            "Schema": {
                "name": "Log `Schema`",
                "summary": "The `Schema` which this log is assigned",
                "value": "00401d76566758a5b6bfc561f1c936d8fc86b5b42ea22ab1dabf40d249d27dd906401fde147e53f44c103dd02a254916be113e51de1077a946a3a0c1272b9b348437"
            },
            "Entries": {
                "name": "Array of `Entries`",
                "summary": "All `Entries` in the test Log",
                "value": {
                    "entries": [
                        {
                            "author": "2deee1fac104aaac753377bbc2ff70fa5d5154abdac4b4577392db88de6a9a49",
                            "entryBytes": "009cdb3a8c0c4b308173d4c3c43a67a6d013444af99acb8be6c52423746d9aa2c10101f60040190c0d1b8a9bbe5d8b94c8226cdb5d9804af3af6a0c5e34c918864370953dbc7100438f1e5cb0f34bd214c595e37fbb0727f86e9f3eccafa9ba13ed8ef77a04ef01463f550ce62f983494d0eb6051c73a5641025f355758006724e5b730f47a4454c5395eab807325ee58d69c08d66461357d0f961aee383acc3247ed6419706",
                            "entryHash": "004028107485824f4ccbd42aaa9136855e373837b175f41e63f0bc410aba4bf0e520ab5668467022d36fe886985e6c33e9212a2a86eeb86a9eba58f50adfcb4ad81b",
                            "logId": 1,
                            "payloadBytes": "a466616374696f6e6663726561746566736368656d6178843030343031643736353636373538613562366266633536316631633933366438666338366235623432656132326162316461626634306432343964323764643930363430316664653134376535336634346331303364643032613235343931366265313133653531646531303737613934366133613063313237326239623334383433376776657273696f6e01666669656c6473a26b6465736372697074696f6ea26474797065637374726576616c756571666f7220706c6179696e67206368657373646e616d65a26474797065637374726576616c7565656368657373",
                            "payloadHash": "0040190c0d1b8a9bbe5d8b94c8226cdb5d9804af3af6a0c5e34c918864370953dbc7100438f1e5cb0f34bd214c595e37fbb0727f86e9f3eccafa9ba13ed8ef77a04e",
                            "seqNum": 1
                        }
                    ]
                }
            }
        }
    },
    "methods": [
        {
            "name": "panda_getEntryArguments",
            "summary": "Returns arguments needed for constructing the next entry given author and schema.",
            "description": "Fetch the required arguments needed when constructing and publishing an `Entry` to a p2panda log. `p2panda` logs are based on the [Bamboo](https://github.com/AljoschaMeyer/bamboo) append only log specification. See the [p2panda-rs]() and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
            "params": [
                {
                    "name": "author",
                    "summary": "The public key of a p2panda author",
                    "description": "Authors are hex encoded ed25519 public key strings. See the [p2panda-rs]() and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "pattern": "[0-9a-f]{64}",
                        "minLength": 64,
                        "maxLength": 64
                    }
                },
                {
                    "name": "schema",
                    "summary": "The hash of a p2panda schema",
                    "description": "Validation for message payloads and definitions of system schemas. This uses `Concise Data Definition Language` ([CDDL}(https://datatracker.ietf.org/doc/html/rfc8610)) internally to verify [CBOR](https://cbor.io/) data of p2panda messages. See the [p2panda-rs]() and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "minLength": 132,
                        "maxLength": 132,
                        "pattern": "[0-9a-f]{132}"
                    }
                }
            ],
            "result": {
                "name": "nextEntryArgs",
                "summary": "Values required for publishing a p2panda entry",
                "description": "The values for `entryHashSkiplink`, `entryHashBacklink`, `seqNum` and `logId` must be fetched from a node before constructung and publishing a new entry to the specified log. `p2panda` logs are based on the [Bamboo](https://github.com/AljoschaMeyer/bamboo) append only log specification. See the [p2panda-rs]() and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "type": "object",
                    "properties": {
                        "entryHashSkiplink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "entryHashBacklink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "seqNum": {
                            "type": "number"
                        },
                        "logId": {
                            "type": "number"
                        }
                    }
                }
            },
            "examples": [
                {
                    "name": "Example `Entry` arguments request.",
                    "summary": "An example of a valid parameters and response when making a request, based on test data.",
                    "params": [
                        {
                            "name": "Log `Author`",
                            "summary": "The `Author` of the test log.",
                            "value": "2deee1fac104aaac753377bbc2ff70fa5d5154abdac4b4577392db88de6a9a49"
                        },
                        {
                            "name": "Log `Schema`",
                            "summary": "The `Schema` which this log is assigned",
                            "value": "00401d76566758a5b6bfc561f1c936d8fc86b5b42ea22ab1dabf40d249d27dd906401fde147e53f44c103dd02a254916be113e51de1077a946a3a0c1272b9b348437"
                        }
                    ],
                    "result": {
                        "name": "`Entry` arguments",
                        "summary": "The arguments required for publishing the next `Entry` to the test log.",
                        "value": {
                            "entryHashBacklink": "004028107485824f4ccbd42aaa9136855e373837b175f41e63f0bc410aba4bf0e520ab5668467022d36fe886985e6c33e9212a2a86eeb86a9eba58f50adfcb4ad81b",
                            "entryHashSkiplink": null,
                            "logId": 1,
                            "seqNum": 2
                        }
                    }
                }
            ]
        },
        {
            "name": "panda_queryEntries",
            "summary": "Query node for encoded entries of a given schema.",
            "description": "This method returns all entries of a given schema. See the [p2panda-rs]() and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
            "params": [
                {
                    "name": "schema",
                    "summary": "The hash of a p2panda schema",
                    "description": "Validation for message payloads and definitions of system schemas. This uses `Concise Data Definition Language` ([CDDL}(https://datatracker.ietf.org/doc/html/rfc8610)) internally to verify [CBOR](https://cbor.io/) data of p2panda messages. See the [p2panda-rs]() and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "minLength": 132,
                        "maxLength": 132,
                        "pattern": "[0-9a-f]{132}"
                    }
                }
            ],
            "result": {
                "schema": {
                    "type": "object",
                    "properties": {
                        "entries": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "author": {
                                        "type": "string",
                                        "pattern": "[0-9a-f]{64}",
                                        "minLength": 64,
                                        "maxLength": 64
                                    },
                                    "entryBytes": {
                                        "type": "string"
                                    },
                                    "entryHash": {
                                        "type": "string",
                                        "minLength": 132,
                                        "maxLength": 132,
                                        "pattern": "[0-9a-f]{132}"
                                    },
                                    "logId": {
                                        "type": "number"
                                    },
                                    "payloadBytes": {
                                        "type": "string"
                                    },
                                    "payloadHash": {
                                        "type": "string",
                                        "minLength": 132,
                                        "maxLength": 132,
                                        "pattern": "[0-9a-f]{132}"
                                    },
                                    "seqNum": {
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "examples": [
                {
                    "name": "Example request for the next `Entry` arguments",
                    "summary": "The parameters and response when making this request according to the test data.",
                    "params": [
                        {
                            "name": "Log `Schema`",
                            "summary": "The `Schema` which this log is assigned",
                            "value": "00401d76566758a5b6bfc561f1c936d8fc86b5b42ea22ab1dabf40d249d27dd906401fde147e53f44c103dd02a254916be113e51de1077a946a3a0c1272b9b348437"
                        }
                    ],
                    "result": {
                        "name": "Array of `Entries`",
                        "summary": "All `Entries` in the test Log",
                        "value": {
                            "entries": [
                                {
                                    "author": "2deee1fac104aaac753377bbc2ff70fa5d5154abdac4b4577392db88de6a9a49",
                                    "entryBytes": "009cdb3a8c0c4b308173d4c3c43a67a6d013444af99acb8be6c52423746d9aa2c10101f60040190c0d1b8a9bbe5d8b94c8226cdb5d9804af3af6a0c5e34c918864370953dbc7100438f1e5cb0f34bd214c595e37fbb0727f86e9f3eccafa9ba13ed8ef77a04ef01463f550ce62f983494d0eb6051c73a5641025f355758006724e5b730f47a4454c5395eab807325ee58d69c08d66461357d0f961aee383acc3247ed6419706",
                                    "entryHash": "004028107485824f4ccbd42aaa9136855e373837b175f41e63f0bc410aba4bf0e520ab5668467022d36fe886985e6c33e9212a2a86eeb86a9eba58f50adfcb4ad81b",
                                    "logId": 1,
                                    "payloadBytes": "a466616374696f6e6663726561746566736368656d6178843030343031643736353636373538613562366266633536316631633933366438666338366235623432656132326162316461626634306432343964323764643930363430316664653134376535336634346331303364643032613235343931366265313133653531646531303737613934366133613063313237326239623334383433376776657273696f6e01666669656c6473a26b6465736372697074696f6ea26474797065637374726576616c756571666f7220706c6179696e67206368657373646e616d65a26474797065637374726576616c7565656368657373",
                                    "payloadHash": "0040190c0d1b8a9bbe5d8b94c8226cdb5d9804af3af6a0c5e34c918864370953dbc7100438f1e5cb0f34bd214c595e37fbb0727f86e9f3eccafa9ba13ed8ef77a04e",
                                    "seqNum": 1
                                }
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "panda_publishEntry",
            "summary": "Publish an encoded entry and message.",
            "description": "Publish a new `Entry` to a `p2panda` log. See the [p2panda-rs]() and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
            "params": [
                {
                    "name": "entryEncoded",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "messageEncoded",
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "result": {
                "name": "nextEntryArgs",
                "summary": "Values required for publishing a p2panda entry",
                "description": "The values for `entryHashSkiplink`, `entryHashBacklink`, `seqNum` and `logId` must be fetched from a node before constructung and publishing a new entry to the specified log. `p2panda` logs are based on the [Bamboo](https://github.com/AljoschaMeyer/bamboo) append only log specification. See the [p2panda-rs]() and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "type": "object",
                    "properties": {
                        "entryHashSkiplink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "entryHashBacklink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "seqNum": {
                            "type": "number"
                        },
                        "logId": {
                            "type": "number"
                        }
                    }
                }
            },
            "examples": [
                {
                    "name": "Example for publishing an `Entry`",
                    "summary": "Example of valid parameters for publishing a new `Entry` on the test log. Returns the `Entry` arguments required for publishing the next `Entry` on our log.",
                    "params": [
                        {
                            "name": "Encoded first `Entry`.",
                            "summary": "Encoded bytes of the first entry in a p2panda `Bamboo` log.",
                            "value": "009cdb3a8c0c4b308173d4c3c43a67a6d013444af99acb8be6c52423746d9aa2c10101f60040190c0d1b8a9bbe5d8b94c8226cdb5d9804af3af6a0c5e34c918864370953dbc7100438f1e5cb0f34bd214c595e37fbb0727f86e9f3eccafa9ba13ed8ef77a04ef01463f550ce62f983494d0eb6051c73a5641025f355758006724e5b730f47a4454c5395eab807325ee58d69c08d66461357d0f961aee383acc3247ed6419706"
                        },
                        {
                            "name": "Encoded first `Message`",
                            "summary": "Encoded bytes of the payload of the first entry in a p2panda `Bamboo` log.",
                            "value": "a466616374696f6e6663726561746566736368656d6178843030343031643736353636373538613562366266633536316631633933366438666338366235623432656132326162316461626634306432343964323764643930363430316664653134376535336634346331303364643032613235343931366265313133653531646531303737613934366133613063313237326239623334383433376776657273696f6e01666669656c6473a26b6465736372697074696f6ea26474797065637374726576616c756571666f7220706c6179696e67206368657373646e616d65a26474797065637374726576616c7565656368657373"
                        }
                    ],
                    "result": {
                        "name": "`Entry` arguments",
                        "summary": "The arguments required for publishing the next `Entry` to the test log.",
                        "value": {
                            "entryHashBacklink": "004028107485824f4ccbd42aaa9136855e373837b175f41e63f0bc410aba4bf0e520ab5668467022d36fe886985e6c33e9212a2a86eeb86a9eba58f50adfcb4ad81b",
                            "entryHashSkiplink": null,
                            "logId": 1,
                            "seqNum": 2
                        }
                    }
                }
            ]
        }
    ]
}