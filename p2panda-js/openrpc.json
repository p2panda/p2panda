{
    "openrpc": "1.0.0-rc1",
    "info": {
        "title": "p2panda RPC interface",
        "version": "0.0.1",
        "description": "The API for a p2panda node which can be used for creating and retrieving entries on a Bamboo append-only log.",
        "contact": {
            "name": "p2panda Team",
            "email": "contributors@p2panda.org",
            "url": "https://p2panda.org"
        },
        "license": {
            "name": "GNU Affero General Public License v3.0"
        }
    },
    "servers": [
        {
            "name": "p2panda node",
            "url": "https://welle.liebechaos.org"
        }
    ],
    "components": {
        "contentDescriptors": {
            "EntryArgs": {
                "name": "nextEntryArgs",
                "summary": "Values required for publishing a p2panda entry",
                "description": "The values for `entryHashSkiplink`, `entryHashBacklink`, `seqNum` and `logId` must be fetched from a node before constructung and publishing a new entry to the specified log. `p2panda` logs are based on the [Bamboo](https://github.com/AljoschaMeyer/bamboo) append only log specification. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "type": "object",
                    "properties": {
                        "entryHashSkiplink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "entryHashBacklink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "seqNum": {
                            "type": "number"
                        },
                        "logId": {
                            "type": "number"
                        }
                    }
                }
            },
            "Author": {
                "name": "author",
                "summary": "The public key of a p2panda author",
                "description": "Authors are hex encoded ed25519 public key strings. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "[0-9a-f]{64}",
                    "minLength": 64,
                    "maxLength": 64
                }
            },
            "Schema": {
                "name": "schema",
                "summary": "The hash of a p2panda schema",
                "description": "Validation for message payloads and definitions of system schemas. This uses `Concise Data Definition Language` ([CDDL](https://datatracker.ietf.org/doc/html/rfc8610)) internally to verify [CBOR](https://cbor.io/) data of p2panda messages. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "type": "string",
                    "minLength": 132,
                    "maxLength": 132,
                    "pattern": "[0-9a-f]{132}"
                }
            },
            "QueryEntriesResponse": {
                "name": "entries",
                "summary": "The response from a call to panda_queryEntries",
                "required": true,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "author": {
                                "type": "string",
                                "pattern": "[0-9a-f]{64}",
                                "minLength": 64,
                                "maxLength": 64
                            },
                            "entryBytes": {
                                "type": "string"
                            },
                            "entryHash": {
                                "type": "string",
                                "minLength": 132,
                                "maxLength": 132,
                                "pattern": "[0-9a-f]{132}"
                            },
                            "logId": {
                                "type": "number"
                            },
                            "payloadBytes": {
                                "type": "string"
                            },
                            "payloadHash": {
                                "type": "string",
                                "minLength": 132,
                                "maxLength": 132,
                                "pattern": "[0-9a-f]{132}"
                            },
                            "seqNum": {
                                "type": "number"
                            }
                        }
                    }
                }
            }
        },
        "schemas": {
            "Author": {
                "type": "string",
                "pattern": "[0-9a-f]{64}",
                "minLength": 64,
                "maxLength": 64
            },
            "Hash": {
                "type": "string",
                "minLength": 132,
                "maxLength": 132,
                "pattern": "[0-9a-f]{132}"
            },
            "EntryArgs": {
                "type": "object",
                "properties": {
                    "entryHashSkiplink": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "type": "string",
                                "minLength": 132,
                                "maxLength": 132,
                                "pattern": "[0-9a-f]{132}"
                            }
                        ]
                    },
                    "entryHashBacklink": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "type": "string",
                                "minLength": 132,
                                "maxLength": 132,
                                "pattern": "[0-9a-f]{132}"
                            }
                        ]
                    },
                    "seqNum": {
                        "type": "number"
                    },
                    "logId": {
                        "type": "number"
                    }
                }
            },
            "Entry": {
                "type": "object",
                "properties": {
                    "author": {
                        "type": "string",
                        "pattern": "[0-9a-f]{64}",
                        "minLength": 64,
                        "maxLength": 64
                    },
                    "entryBytes": {
                        "type": "string"
                    },
                    "entryHash": {
                        "type": "string",
                        "minLength": 132,
                        "maxLength": 132,
                        "pattern": "[0-9a-f]{132}"
                    },
                    "logId": {
                        "type": "number"
                    },
                    "payloadBytes": {
                        "type": "string"
                    },
                    "payloadHash": {
                        "type": "string",
                        "minLength": 132,
                        "maxLength": 132,
                        "pattern": "[0-9a-f]{132}"
                    },
                    "seqNum": {
                        "type": "number"
                    }
                }
            },
            "EntryEncoded": {
                "type": "string"
            },
            "MessageEncoded": {
                "type": "string"
            },
            "Entries": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "author": {
                            "type": "string",
                            "pattern": "[0-9a-f]{64}",
                            "minLength": 64,
                            "maxLength": 64
                        },
                        "entryBytes": {
                            "type": "string"
                        },
                        "entryHash": {
                            "type": "string",
                            "minLength": 132,
                            "maxLength": 132,
                            "pattern": "[0-9a-f]{132}"
                        },
                        "logId": {
                            "type": "number"
                        },
                        "payloadBytes": {
                            "type": "string"
                        },
                        "payloadHash": {
                            "type": "string",
                            "minLength": 132,
                            "maxLength": 132,
                            "pattern": "[0-9a-f]{132}"
                        },
                        "seqNum": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "examples": {
            "FirstEntryEncoded": {
                "name": "entryEncoded",
                "summary": "Encoded bytes of the first entry in a p2panda `Bamboo` log.",
                "value": "00a56085d948eaed23b0db3be6ef7626e7dc5e2674ee26267838d478324f99207c0101cc004009917d06d536fcf78c80cec09698bcf06e4268506d4d4a9880b386f9126f9f7a2767a794f190860a65e57e881ec26f02d8ba00ffcc5107ac0c051d3a34bbb04d6e667ca797bf3a9fd4686d2903b67ff1dc38d4b62ea1180088350178b81f79cbceb9294cc0e4697e4f2cb5c69fc6140d94d29ec58dcb27c78dbd0076064d910e"
            },
            "FirstEntryMessageEncdoded": {
                "name": "messageEncoded",
                "summary": "Encoded bytes of the payload of the first entry in a p2panda `Bamboo` log.",
                "value": "a466616374696f6e6663726561746566736368656d6178843030343031643736353636373538613562366266633536316631633933366438666338366235623432656132326162316461626634306432343964323764643930363430316664653134376535336634346331303364643032613235343931366265313133653531646531303737613934366133613063313237326239623334383433376776657273696f6e01666669656c6473a1676d657373616765a26474797065637374726576616c75656668656c6c6f21"
            },
            "EntryArgsResult": {
                "name": "nextEntryArgs",
                "summary": "The arguments required for publishing the next `Entry` to the test log.",
                "value": {
                    "entryHashBacklink": "004064b3e9a2c863539aa926a1be7b9d4db10fb6a29d89eb6800d53e3ff538c493abdc1d44e422a917c26970e8ddc309b3fbdb5c771d122170218aba1297fa0b6b02",
                    "entryHashSkiplink": null,
                    "seqNum": 2,
                    "logId": 1
                }
            },
            "Author": {
                "name": "author",
                "summary": "The `Author` of the test log.",
                "value": "a56085d948eaed23b0db3be6ef7626e7dc5e2674ee26267838d478324f99207c"
            },
            "Schema": {
                "name": "schema",
                "summary": "The `Schema` which this log is assigned",
                "value": "00401d76566758a5b6bfc561f1c936d8fc86b5b42ea22ab1dabf40d249d27dd906401fde147e53f44c103dd02a254916be113e51de1077a946a3a0c1272b9b348437"
            },
            "Entries": {
                "name": "entries",
                "summary": "All `Entries` in the test Log",
                "value": {
                    "entries": [
                        {
                            "author": "a56085d948eaed23b0db3be6ef7626e7dc5e2674ee26267838d478324f99207c",
                            "entryBytes": "00a56085d948eaed23b0db3be6ef7626e7dc5e2674ee26267838d478324f99207c0101cc004009917d06d536fcf78c80cec09698bcf06e4268506d4d4a9880b386f9126f9f7a2767a794f190860a65e57e881ec26f02d8ba00ffcc5107ac0c051d3a34bbb04d6e667ca797bf3a9fd4686d2903b67ff1dc38d4b62ea1180088350178b81f79cbceb9294cc0e4697e4f2cb5c69fc6140d94d29ec58dcb27c78dbd0076064d910e",
                            "entryHash": "004064b3e9a2c863539aa926a1be7b9d4db10fb6a29d89eb6800d53e3ff538c493abdc1d44e422a917c26970e8ddc309b3fbdb5c771d122170218aba1297fa0b6b02",
                            "payloadBytes": "a466616374696f6e6663726561746566736368656d6178843030343031643736353636373538613562366266633536316631633933366438666338366235623432656132326162316461626634306432343964323764643930363430316664653134376535336634346331303364643032613235343931366265313133653531646531303737613934366133613063313237326239623334383433376776657273696f6e01666669656c6473a1676d657373616765a26474797065637374726576616c75656668656c6c6f21",
                            "payloadHash": "004009917d06d536fcf78c80cec09698bcf06e4268506d4d4a9880b386f9126f9f7a2767a794f190860a65e57e881ec26f02d8ba00ffcc5107ac0c051d3a34bbb04d",
                            "logId": 1,
                            "seqNum": 1
                        }
                    ]
                }
            }
        }
    },
    "methods": [
        {
            "name": "panda_getEntryArguments",
            "summary": "Returns arguments needed for constructing the next entry given author and schema.",
            "description": "Fetch the required arguments needed when constructing and publishing an `Entry` to a p2panda log. `p2panda` logs are based on the [Bamboo](https://github.com/AljoschaMeyer/bamboo) append only log specification. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "author",
                    "summary": "The public key of a p2panda author",
                    "description": "Authors are hex encoded ed25519 public key strings. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "pattern": "[0-9a-f]{64}",
                        "minLength": 64,
                        "maxLength": 64
                    }
                },
                {
                    "name": "schema",
                    "summary": "The hash of a p2panda schema",
                    "description": "Validation for message payloads and definitions of system schemas. This uses `Concise Data Definition Language` ([CDDL](https://datatracker.ietf.org/doc/html/rfc8610)) internally to verify [CBOR](https://cbor.io/) data of p2panda messages. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "minLength": 132,
                        "maxLength": 132,
                        "pattern": "[0-9a-f]{132}"
                    }
                }
            ],
            "result": {
                "name": "nextEntryArgs",
                "summary": "Values required for publishing a p2panda entry",
                "description": "The values for `entryHashSkiplink`, `entryHashBacklink`, `seqNum` and `logId` must be fetched from a node before constructung and publishing a new entry to the specified log. `p2panda` logs are based on the [Bamboo](https://github.com/AljoschaMeyer/bamboo) append only log specification. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "type": "object",
                    "properties": {
                        "entryHashSkiplink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "entryHashBacklink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "seqNum": {
                            "type": "number"
                        },
                        "logId": {
                            "type": "number"
                        }
                    }
                }
            },
            "examples": [
                {
                    "name": "Example `Entry` arguments request.",
                    "summary": "An example of a valid parameters and response when making a request, based on test data.",
                    "params": [
                        {
                            "name": "author",
                            "summary": "The `Author` of the test log.",
                            "value": "a56085d948eaed23b0db3be6ef7626e7dc5e2674ee26267838d478324f99207c"
                        },
                        {
                            "name": "schema",
                            "summary": "The `Schema` which this log is assigned",
                            "value": "00401d76566758a5b6bfc561f1c936d8fc86b5b42ea22ab1dabf40d249d27dd906401fde147e53f44c103dd02a254916be113e51de1077a946a3a0c1272b9b348437"
                        }
                    ],
                    "result": {
                        "name": "nextEntryArgs",
                        "summary": "The arguments required for publishing the next `Entry` to the test log.",
                        "value": {
                            "entryHashBacklink": "004064b3e9a2c863539aa926a1be7b9d4db10fb6a29d89eb6800d53e3ff538c493abdc1d44e422a917c26970e8ddc309b3fbdb5c771d122170218aba1297fa0b6b02",
                            "entryHashSkiplink": null,
                            "seqNum": 2,
                            "logId": 1
                        }
                    }
                }
            ]
        },
        {
            "name": "panda_queryEntries",
            "summary": "Query node for encoded entries of a given schema.",
            "description": "This method returns all entries of a given schema. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "schema",
                    "summary": "The hash of a p2panda schema",
                    "description": "Validation for message payloads and definitions of system schemas. This uses `Concise Data Definition Language` ([CDDL](https://datatracker.ietf.org/doc/html/rfc8610)) internally to verify [CBOR](https://cbor.io/) data of p2panda messages. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "minLength": 132,
                        "maxLength": 132,
                        "pattern": "[0-9a-f]{132}"
                    }
                }
            ],
            "result": {
                "name": "entries",
                "summary": "The response from a call to panda_queryEntries",
                "required": true,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "author": {
                                "type": "string",
                                "pattern": "[0-9a-f]{64}",
                                "minLength": 64,
                                "maxLength": 64
                            },
                            "entryBytes": {
                                "type": "string"
                            },
                            "entryHash": {
                                "type": "string",
                                "minLength": 132,
                                "maxLength": 132,
                                "pattern": "[0-9a-f]{132}"
                            },
                            "logId": {
                                "type": "number"
                            },
                            "payloadBytes": {
                                "type": "string"
                            },
                            "payloadHash": {
                                "type": "string",
                                "minLength": 132,
                                "maxLength": 132,
                                "pattern": "[0-9a-f]{132}"
                            },
                            "seqNum": {
                                "type": "number"
                            }
                        }
                    }
                }
            },
            "examples": [
                {
                    "name": "Example request for the next `Entry` arguments",
                    "summary": "The parameters and response when making this request according to the test data.",
                    "params": [
                        {
                            "name": "schema",
                            "summary": "The `Schema` which this log is assigned",
                            "value": "00401d76566758a5b6bfc561f1c936d8fc86b5b42ea22ab1dabf40d249d27dd906401fde147e53f44c103dd02a254916be113e51de1077a946a3a0c1272b9b348437"
                        }
                    ],
                    "result": {
                        "name": "entries",
                        "summary": "All `Entries` in the test Log",
                        "value": {
                            "entries": [
                                {
                                    "author": "a56085d948eaed23b0db3be6ef7626e7dc5e2674ee26267838d478324f99207c",
                                    "entryBytes": "00a56085d948eaed23b0db3be6ef7626e7dc5e2674ee26267838d478324f99207c0101cc004009917d06d536fcf78c80cec09698bcf06e4268506d4d4a9880b386f9126f9f7a2767a794f190860a65e57e881ec26f02d8ba00ffcc5107ac0c051d3a34bbb04d6e667ca797bf3a9fd4686d2903b67ff1dc38d4b62ea1180088350178b81f79cbceb9294cc0e4697e4f2cb5c69fc6140d94d29ec58dcb27c78dbd0076064d910e",
                                    "entryHash": "004064b3e9a2c863539aa926a1be7b9d4db10fb6a29d89eb6800d53e3ff538c493abdc1d44e422a917c26970e8ddc309b3fbdb5c771d122170218aba1297fa0b6b02",
                                    "payloadBytes": "a466616374696f6e6663726561746566736368656d6178843030343031643736353636373538613562366266633536316631633933366438666338366235623432656132326162316461626634306432343964323764643930363430316664653134376535336634346331303364643032613235343931366265313133653531646531303737613934366133613063313237326239623334383433376776657273696f6e01666669656c6473a1676d657373616765a26474797065637374726576616c75656668656c6c6f21",
                                    "payloadHash": "004009917d06d536fcf78c80cec09698bcf06e4268506d4d4a9880b386f9126f9f7a2767a794f190860a65e57e881ec26f02d8ba00ffcc5107ac0c051d3a34bbb04d",
                                    "logId": 1,
                                    "seqNum": 1
                                }
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "panda_publishEntry",
            "summary": "Publish an encoded entry and message.",
            "description": "Publish a new `Entry` to a `p2panda` log. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "entryEncoded",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "messageEncoded",
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "result": {
                "name": "nextEntryArgs",
                "summary": "Values required for publishing a p2panda entry",
                "description": "The values for `entryHashSkiplink`, `entryHashBacklink`, `seqNum` and `logId` must be fetched from a node before constructung and publishing a new entry to the specified log. `p2panda` logs are based on the [Bamboo](https://github.com/AljoschaMeyer/bamboo) append only log specification. See the [p2panda-rs](https://github.com/p2panda/p2panda/tree/main/p2panda-rs) and [p2panda-js](https://github.com/p2panda/p2panda/tree/main/p2panda-js) libraries or the p2panda [handbook](https://github.com/p2panda/handbook) for more information.",
                "required": true,
                "schema": {
                    "type": "object",
                    "properties": {
                        "entryHashSkiplink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "entryHashBacklink": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "minLength": 132,
                                    "maxLength": 132,
                                    "pattern": "[0-9a-f]{132}"
                                }
                            ]
                        },
                        "seqNum": {
                            "type": "number"
                        },
                        "logId": {
                            "type": "number"
                        }
                    }
                }
            },
            "examples": [
                {
                    "name": "Example for publishing an `Entry`",
                    "summary": "Example of valid parameters for publishing a new `Entry` on the test log. Returns the `Entry` arguments required for publishing the next `Entry` on our log.",
                    "params": [
                        {
                            "name": "entryEncoded",
                            "summary": "Encoded bytes of the first entry in a p2panda `Bamboo` log.",
                            "value": "00a56085d948eaed23b0db3be6ef7626e7dc5e2674ee26267838d478324f99207c0101cc004009917d06d536fcf78c80cec09698bcf06e4268506d4d4a9880b386f9126f9f7a2767a794f190860a65e57e881ec26f02d8ba00ffcc5107ac0c051d3a34bbb04d6e667ca797bf3a9fd4686d2903b67ff1dc38d4b62ea1180088350178b81f79cbceb9294cc0e4697e4f2cb5c69fc6140d94d29ec58dcb27c78dbd0076064d910e"
                        },
                        {
                            "name": "messageEncoded",
                            "summary": "Encoded bytes of the payload of the first entry in a p2panda `Bamboo` log.",
                            "value": "a466616374696f6e6663726561746566736368656d6178843030343031643736353636373538613562366266633536316631633933366438666338366235623432656132326162316461626634306432343964323764643930363430316664653134376535336634346331303364643032613235343931366265313133653531646531303737613934366133613063313237326239623334383433376776657273696f6e01666669656c6473a1676d657373616765a26474797065637374726576616c75656668656c6c6f21"
                        }
                    ],
                    "result": {
                        "name": "nextEntryArgs",
                        "summary": "The arguments required for publishing the next `Entry` to the test log.",
                        "value": {
                            "entryHashBacklink": "004064b3e9a2c863539aa926a1be7b9d4db10fb6a29d89eb6800d53e3ff538c493abdc1d44e422a917c26970e8ddc309b3fbdb5c771d122170218aba1297fa0b6b02",
                            "entryHashSkiplink": null,
                            "seqNum": 2,
                            "logId": 1
                        }
                    }
                }
            ]
        }
    ]
}