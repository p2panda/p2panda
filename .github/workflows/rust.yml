name: p2panda-rs

on: push

env:
  CARGO_TERM_COLOR: always
  cargo_manifest: p2panda-rs/Cargo.toml

jobs:
  rust-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v0

      - name: Run tests
        # Ensure debug output is also tested
        env:
          RUST_LOG: debug
        run: |
          cargo test \
            --manifest-path ${{ env.cargo_manifest }} \
            --all-features

  wasm-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v0
        with:
          bins: wasm-bindgen-cli,wasm-pack
          targets: wasm32-unknown-unknown

      - name: Run wasm tests
        run: |
          wasm-pack test \
            --headless \
            --chrome \
            --firefox \
            p2panda-rs

  rust-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v0

      - name: Check project and dependencies
        run: |
          cargo check \
            --manifest-path ${{ env.cargo_manifest }}

  rust-fmt:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v0
        with:
          components: rustfmt

      - name: Check formatting
        run: |
          cargo fmt \
            --manifest-path ${{ env.cargo_manifest }} \
            -- --check

  rust-clippy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v0
        with:
          components: clippy

      - name: Check code with clippy
        run: |
          cargo clippy \
            --manifest-path ${{ env.cargo_manifest }} \
            -- -D warnings --no-deps

  rust-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Install Protocol Buffers compiler
        run: sudo apt-get install protobuf-compiler

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v0
        with:
          bins: grcov
          components: llvm-tools-preview

      - name: Run compiler for source based coverage
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: '-Cinstrument-coverage'
          LLVM_PROFILE_FILE: 'cargo-test-%p-%m.profraw'
        run: |
          cargo test \
            --manifest-path ${{ env.cargo_manifest }}

      - name: Run grcov to generate .lcov file
        run: |
          grcov . \
            --binary-path ./p2panda-rs/target/debug/deps/ \
            -s . \
            -t lcov \
            --branch \
            --ignore-not-existing \
            --ignore '../*' \
            --ignore "/*" \
            -o coverage.lcov

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: coverage.lcov
